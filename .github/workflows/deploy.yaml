name: Docker build and push to Artifact Registry

on:
  push:
    branches:
      - api-tracking

env:
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REPOSITORY: ${{ secrets.REPOSITORY }}

jobs:
  login-build-push:
    name: Docker login, build, and push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Docker login'
        uses: 'docker/login-action@v1'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ secrets.DOCKER_TOKEN }}'

      - name: 'Docker build and push - ml-webservice'
        env:
          IMAGE: ml-webservice
          DOCKERFILE_PATH: webservice/
        run: |
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            $DOCKERFILE_PATH
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

      - name: 'Docker build and push - grafana'
        env:
          IMAGE: grafana
          DOCKERFILE_PATH: deployment/grafana_deployment/
        run: |
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            $DOCKERFILE_PATH
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

      - name: 'Docker build and push - prometheus'
        env:
          IMAGE: prometheus
          DOCKERFILE_PATH: deployment/prometheus_deployment/
        run: |
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            $DOCKERFILE_PATH
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

  auth:
    name: Authenticate to Google Cloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          token_format: 'access_token'
