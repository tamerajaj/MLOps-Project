name: Docker build and push to Artifact Registry

on:
  push:
    branches:
      - api-tracking

env:
  GAR_LOCATION: ${{ secrets.GAR_LOCATION }}
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REPOSITORY: ${{ secrets.REPOSITORY }}

jobs:
  login-build-push-ml-service:
    name: Docker login, build, and push - ml-service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          token_format: 'access_token'

      - uses: 'docker/login-action@v1'
        name: 'Docker login'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'


      - name: 'Docker build - ml-service'
        env:
          IMAGE: ml-service

          DOCKERFILE_PATH: webservice/
        run: |
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            $DOCKERFILE_PATH


      - name: 'Docker push - ml-service'
        run: |
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/ml-service:latest"


  login-build-push-grafana:
    name: Docker login, build, and push - grafana
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Authenticate to Google Cloud'
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
          token_format: 'access_token'

      - uses: 'docker/login-action@v1'
        name: 'Docker login'
        with:
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'

      - name: 'Docker build - grafana'
        env:
          IMAGE: grafana
          DOCKERFILE_PATH: deployment/grafana_deployment/
        run: |
          docker build \
            --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
            $DOCKERFILE_PATH

      - name: 'Docker push - grafana'
        run: |
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/grafana:latest"


  login-build-push-prometheus:
      name: Docker login, build, and push - prometheus
      runs-on: ubuntu-latest
      env:
        INTERNAL_IP: ${{ secrets.INTERNAL_IP }}

      steps:

        - name: Checkout
          uses: actions/checkout@v3
        - name: 'Print Current Path'
          run: pwd
        - name: Debug File Structure
          run: ls -la

        - name: Debug Template File
          run: cat deployment/prometheus_deployment/prometheus/prometheus.yml.template
        

        - name: 'Authenticate to Google Cloud'
          id: auth
          uses: 'google-github-actions/auth@v1'
          with:
            credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
            token_format: 'access_token'

        - uses: 'docker/login-action@v1'
          name: 'Docker login'
          with:
            registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'
            username: 'oauth2accesstoken'
            password: '${{ steps.auth.outputs.access_token }}'

        - name: 'Copy prometheus.yml template'
          run: |

            cp deployment/prometheus_deployment/prometheus/prometheus.yml.template deployment/prometheus_deployment/prometheus/prometheus.yml
        - name: Debug Yml File
          run: cat deployment/prometheus_deployment/prometheus/prometheus.yml
        - name: 'Replace INTERNAL_IP in prometheus.yml'
          id: replace_internal_ip
          run: |
            sed -i '' -e "s/INTERNAL_IP/$INTERNAL_IP/" deployment/prometheus_deployment/prometheus/prometheus.yml



        - name: 'Docker build - prometheus'
          env:
            IMAGE: prometheus
            DOCKERFILE_PATH: deployment/prometheus_deployment/
          run: |
            docker build \
              --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
              $DOCKERFILE_PATH

            echo "::set-output name=docker_build_status::success"


        - name: 'Docker push - prometheus'
          run: |
            docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/prometheus:latest"

        - name: 'Remove modified prometheus.yml'

          if: steps.replace_internal_ip.outcome == 'success' && steps.docker_build.outputs.docker_build_status == 'success'
          run: |
            rm deployment/prometheus_deployment/prometheus/prometheus.yml
